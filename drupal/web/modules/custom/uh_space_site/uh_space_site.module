<?php

use \Drupal\Core\Entity\EntityInterface;
use \Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;

/**
 *  Implements hook_theme().
 */
function uh_space_site_theme($existing, $type, $theme, $path) {
  return [
    'hero_block' => [
      'variables' => [
        'background_image' => [],
        'title' => [],
        'lead' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_entity_extra_field_info().
 */
function uh_space_site_entity_extra_field_info() {
  $extra_field = [];

  $extra_field['node']['space']['display']['field_smart_equipment_information'] = [
    'label' => t('Smart Equipment Information'),
    'description' => t('Displays space equipment information and falls back to building equipment information.'),
    'weight' => 100,
    'visible' => TRUE,
  ];

  return $extra_field;
}

/**
 * Implements hook_ds_pre_render_alter().
 */
function uh_space_site_ds_pre_render_alter(&$layout_render_array, $context, &$vars) {
  if ($context['bundle'] == 'space' && $context['view_mode'] == 'full') {
    // Unset building equipment information if space equipment information is set.
    if (!empty($layout_render_array['left']['group_equipment']['field_equipment_information']['#items'])) {
      unset($layout_render_array['left']['group_equipment']['ds_chains:node/space/field_building/field_equipment_information']);
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function uh_space_site_views_query_alter($view, $query) {
  // Change contextual filter to OR type so it's enough that either
  // parent term ID or current term ID matches the provided value.
  if ($view->id() == 'space_navigation' && $view->current_display == 'campus_buildings') {
    $query->where[0]['type'] = 'OR';
  }

  // Don't run space search query, if no exposed filter inputs provided.
  if ($view->id() == 'space_search' && $view->current_display == 'main') {
    $exposed_input = $view->getExposedInput();
    if (
      count($exposed_input) == 1 &&
      (isset($exposed_input['search_api_fulltext']) && $exposed_input['search_api_fulltext'] == '')
    ) {
      // We return with no query; this will force the empty text.
      $view->built = TRUE;
      $view->executed = TRUE;
      $view->result = [];
    }
  }

}

/**
 * Implements uh_space_site_system_breadcrumb_alter().
 */
function uh_space_site_system_breadcrumb_alter(&$breadcrumb, $route_match, $context) {
  $links = $breadcrumb->getLinks();

  foreach ($links as $key => &$link) {
    $url = $link->getUrl();
    $params = $url->getRouteParameters();

    if (isset($params['taxonomy_term'])) {
      $tid = $params['taxonomy_term'];

      $parent = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadParents($tid);
      $parent = reset($parent);

      // Switch campus link in breadcrumb with its parent term.
      if ($parent && $parent->bundle() == 'campus') {
        $link->setText($parent->getName());
        $link->setUrl($parent->toUrl());
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function uh_space_site_form_alter(&$form, &$form_state, $form_id) {
  // Filter space_search campus filter options.
  if ($form_id == 'views_exposed_form' && $form['#id'] == 'views-exposed-form-space-search-main') {
    if (!empty($form['field_campus']['#options'])) {
      $tids = array_keys($form['field_campus']['#options']);

      // Load first level campus terms.
      $campus_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('campus', 0, 1, FALSE);
      $campus_tids = array_map(function($term) { return $term->tid; }, $campus_terms);

      // Remove options that aren't first level campus TIDs.
      foreach ($tids as $tid) {
        if ($tid == 'All') {
          continue;
        }

        if (!in_array($tid, $campus_tids)) {
          unset($form['field_campus']['#options'][$tid]);
        }
      }
    }
  }
}

/**
 * Implements hook_language_switch_links_alter().
 */
function uh_space_site_language_switch_links_alter(array &$links, $type, Url $url) {
  // Get current language.
  $language_interface = \Drupal::languageManager()->getCurrentLanguage();

  // Language title texts.
  $language_titles = [
    'fi' => 'Suomi',
    'sv' => 'Svenska',
    'en' => 'English',
  ];

  // Get status code.
  $exception = \Drupal::requestStack()->getCurrentRequest()->attributes->get('exception');
  $not_found = !is_null($exception) && $exception->getStatusCode() == 404;

  // Get current node from route.
  $node = \Drupal::routeMatch()->getParameter('node');

  foreach ($links as $langcode => &$link) {

    // Do not show "Svenska" on FI and EN pages until Swedish content is ready.
    // @todo: remove this if once the Swedish content is ready to be published.
    if ($langcode == 'sv' && $language_interface->getId() != 'sv') {
      unset($links[$langcode]);
    }

    if (array_key_exists($langcode, $language_titles)) {
      $link['title'] = $language_titles[$langcode];
    }

    // Link to front page if status is 404 or current node (if page is node)
    // doesn't have translation.
    if ($not_found || ($node instanceof NodeInterface && !$node->hasTranslation($langcode))) {
      $link['url'] = Url::fromRoute('<front>', [], ['absolute' => TRUE]);
    }

    // Is active link.
    if ($langcode == $language_interface->getId()) {
      $link['is_active'] = TRUE;
    }
  }
}
