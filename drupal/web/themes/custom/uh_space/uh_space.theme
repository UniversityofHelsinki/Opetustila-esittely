<?php

use Drupal\Component\Render\FormattableMarkup;

/**
 * Implements template_preprocess_menu().
 */
function uh_space_preprocess_menu(&$vars) {
  $link_class = false;
  $menu_class = false;

  switch ($vars['menu_name']) {
    case 'footer':
      $link_class = 'list-of-links__link button--action icon--arrow-right theme-transparent-alt';
      $menu_class = 'list-of-links--condensed theme-footer';
      break;
    case 'site-footer':
      $link_class = 'list-of-links__link button--action icon--arrow-right theme-transparent-alt';
      $menu_class = 'list-of-links--condensed theme-info-footer';
      break;
  }

  if ($menu_class) {
    $vars['attributes']['class'][] = $menu_class;
  }

  if ($link_class) {
    foreach ($vars['items'] as &$item) {
      $item['attributes']->addClass($link_class);

      // we want a different active-class than what drupal provides.
      $current_path = \Drupal::request()->getRequestUri();

      if ($item['url']->toString() == $current_path) {
        $item['is_active'] = TRUE;
      }

      $item_has_children = !empty($item['below']);

      if ($item_has_children) {
        $item['attributes']->addClass('is-expandable');

        if (isset($item['is_active'])) {
          $item['attributes']->addClass('is-open');
        }
      }

      foreach ($item['below'] as &$child_item) {
        $child_item['attributes']->addClass('is-lvl2 menu-item');
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for Region templates.
 */
function uh_space_preprocess_region(&$variables) {
  switch ($variables['region']) {
    case 'header':
      $variables['site_name'] = \Drupal::config('system.site')->get('name');
      $variables['logo_path'] = \Drupal::config('uhsg_service_provider_details.settings')->get('logo_path');
      $variables['logo_text'] = \Drupal::config('uhsg_service_provider_details.settings')->get('logo_text');
      $variables['header_class'] = \Drupal::service('path.matcher')->isFrontPage() ? 'l-header-bar--transparent' : 'l-header-bar--negative';
      break;
    case 'footer':
      $variables['logo_path'] = \Drupal::config('uhsg_service_provider_details.settings')->get('logo_path');
      $variables['logo_text'] = \Drupal::config('uhsg_service_provider_details.settings')->get('logo_text');
      $variables['copyright_text'] = \Drupal::config('uhsg_service_provider_details.settings')->get('copyright_text');
      $variables['contact_info'] = \Drupal::config('uhsg_service_provider_details.settings')->get('contact_info');
      break;
    case 'footer_site':
      $variables['spaces_contact_info'] = \Drupal::config('uhsg_service_provider_details.settings')->get('spaces_contact_info');
      break;
  }
}

/**
 * Implements template_preprocess_status_messages().
 */
function uh_space_preprocess_status_messages(&$variables) {
  foreach ($variables['message_list'] as $key => &$message) {
    $icon = FALSE;

    switch ($key) {
      case 'status':
        $icon = _uh_space_load_wrapped_icon('done');
        break;
      case 'warning':
        $icon = _uh_space_load_wrapped_icon('warning');
        break;
      case 'error':
        $icon = _uh_space_load_wrapped_icon('alert');
        break;
    }

    $message = [
      'messages' => $message,
      'icon' => $icon,
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK() for language links.
 */
function uh_space_preprocess_links__language_block(&$variables) {
  foreach ($variables['links'] as $langcode => &$link) {
    // add classes for theming
    $link['link']['#options']['attributes']['class'][] = 'links__link theme-language';
    $link['link']['#title'] = new FormattableMarkup('<abbr title="@title">@langcode</abbr>', array('@title' => $link['link']['#title'], '@langcode' => $langcode ));
    // hide active language
    $active_language = Drupal::languageManager()->getCurrentLanguage()->getId();
    if ($active_language == $langcode) {
      unset($variables['links'][$langcode]);
    }
  }
}

/**
 * Implements template_preprocess_taxonomy_term().
 */
function uh_space_preprocess_taxonomy_term(&$vars) {
  $bundle = $vars['term']->bundle();
  $bundle_class = \Drupal\Component\Utility\Html::getClass($bundle);

  $vars['attributes']['class'][] = 'taxonomy-term';
  $vars['attributes']['class'][] = "taxonomy-term--{$bundle_class}";
}

/**
 * Implements template_preprocess_field().
 */
function uh_space_preprocess_field(&$vars, $hook) {
  // Force reservation link text to static default.
  if ($vars['element']['#field_name'] == 'field_reservation_link') {
    foreach ($vars['items'] as $key => &$item) {
      $item['content']['#title'] = t('Check availability');
    }
  }
}

/**
 * Implements template_preprocess_field__ds_field_expert().
 */
function uh_space_preprocess_field__ds_field_expert(&$vars) {
  // Replace DIY icon definitions in field prefix/suffix with icon SVG contents
  foreach (['prefix', 'suffix'] as $sibling) {
    if (!empty($vars['settings'][$sibling]) && $sibling_content = $vars['settings'][$sibling]) {
      if ($icon_name = _uh_space_filter_icon_name($sibling_content)) {
        $icon = _uh_space_load_icon($icon_name);

        if ($icon) {
          $vars['settings'][$sibling] = _uh_space_wrap_icon($icon, $icon_name);
        }
      }
    }
  }
}

/**
 * Implements template_preprocess_views_exposed_form().
 */
function uh_space_preprocess_views_exposed_form(&$vars) {
  if ($vars['theme_hook_original'] == 'views_exposed_form__space_search__main') {
    $space_search = Drupal\views\Views::getView('space_search');
    $main = $space_search->getDisplay('main');
    $vars['title'] = $main->options['title'];
  }
}

/**
 * Implements template_preprocess_views_mini_pager().
 */
function uh_space_preprocess_views_mini_pager(&$vars) {
  $vars['prev_icon'] = _uh_space_load_wrapped_icon('arrow-left');
  $vars['next_icon'] = _uh_space_load_wrapped_icon('arrow-right');
}

/**
 * Implements template_preprocess_input__textfield().
 */
function uh_space_preprocess_input__textfield(&$vars) {
  if (!empty($vars['attributes']['data-autocomplete-path'])) {
    $vars['suffix_icon'] = _uh_space_load_wrapped_icon('spinner');
  }
}

/**
 * Implements template_preprocess_select().
 */
function uh_space_preprocess_select(&$vars) {
  if (!$vars['element']['#multiple']) {
    $vars['suffix_icon'] = _uh_space_load_wrapped_icon('caret-down');
  }
  else {
    $vars['suffix_icon'] = _uh_space_load_wrapped_icon('plus');
  }
}

/**
 * Implements template_preprocess_input__submit().
 */
function uh_space_preprocess_input__submit(&$vars) {
  if ($vars['element']['#type'] == 'submit') {
    $vars['suffix_icon'] = _uh_space_load_wrapped_icon('search');
  }
}

/**
 * Implements template_preprocess_search_api_autocomplete_suggestion().
 */
function uh_space_preprocess_search_api_autocomplete_suggestion(&$vars) {
  $vars['arrow_icon'] = _uh_space_load_wrapped_icon('arrow-right');
}

/**
 * Helper for getting wrapped icon.
 */
function _uh_space_load_wrapped_icon($icon_name) {
  return _uh_space_wrap_icon(_uh_space_load_icon($icon_name), $icon_name);
}

/**
 * Helper for wrapping SVG icon in a standard way.
 */
function _uh_space_wrap_icon($icon, $icon_name) {
  $icon_clean = preg_replace( "/\<\?xml.+\?\>/", "", $icon);
  $icon_wrapped = "<div class='svg-icon svg-icon--{$icon_name}' role='presentation' aria-hidden='true'>{$icon_clean}</div>";

  return $icon_wrapped;
}

/**
 * Helper for loading an SVG icon.
 */
function _uh_space_load_icon($icon_name) {
  $load_paths = [
    drupal_get_path('theme', 'uh_space') . "/src/icons",
    drupal_get_path('theme', 'uh_space') . "/lib/uh_styleguide/icons/src",
  ];

  foreach ($load_paths as $load_path) {
    $icon_path = "{$load_path}/{$icon_name}.svg";

    if (file_exists($icon_path) && $icon = file_get_contents($icon_path)) {
      return $icon;
    }
  }

  return false;
}

/**
 * Helper for getting icon name from a string.
 */
function _uh_space_filter_icon_name($source) {
  $matches = [];
  if ($icon_regex = preg_match('/icon=(\S+);/', $source, $matches)) {
    return $matches[1];
  }

  return false;
}
